#!/bin/sh

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     (1) Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#    (2) Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
#    (3)The name of the author may not be used to
#    endorse or promote products derived from this software without
#    specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Next line ignored by tcl \
exec tclsh "$0" ${1+"$@"}

namespace eval mpdng {
    variable usage \
"Usage: [info script] \[ -f system_config \] [COMMAND]

This command is used by mpd-ng to start/connect a mpd-ng processusing the
startup config file located in \$HOME/.mpd-ng/startup.cfg

OPTIONS:
    -f       Path to the system.config file

When COMMAND is ommited, it is treated as it is start. It can be:
     start   Start the daemon and return
     kill    Kill the daemon
     status  Print the current player process status
     connect Connect to the mpd-ng player and read/write commands/messages
             from/to stdin/stdout. This is the command used by the user
             interface. This command will start the mpd-ng process if it
             is down.
     help    Print this messag
"
}

###########################################################################
# Catch missing libs
set s [info script]
while {[file type $s] == "link"} { set s [file link $s] }
set ::mpd-ng::libdir [file dirname $s]
lappend auto_path [file join $::mpd-ng::libdir pkgs]
if [catch {
        package require Tcl         8.6
        package require unixsocket  1.0
        package require taglib      1.0
        package require tclreadline 2.3
        load [file join $::mpdng::libdir libtclmpdng.so] } msg] {
    puts stderr "mpd-ng won't start: $msg"
    exit 1
}

###########################################################################
# Check if command is valid
if {$argc == 0} {
    set ::mpdng::system_config \
                               [file join $env(HOME) .mpd-ng system.config]
    set ::mpdng::command start
} elseif {$argc == 1} {
    set ::mpdng::system_config \
                               [file join $env(HOME) .mpd-ng system.config]
    set ::mpdng::command [lindex $argv 0]
} elseif {$argc == 2 && [lindex $argv 0] == "-f"} {
    set ::mpdng::system_config [lindex $argv 1]
    set ::mpdng::command start
} elseif {$argc == 3 && [lindex $argv 0] == "-f"} {
    set ::mpdng::system_config [lindex $argv 1]
    set ::mpdng::command [lindex $argv 2]
} else {
    puts stderr "Failed to execute $argv"
    puts stderr $::mpdng::usage
    exit 1
}

if {[lsearch {start kill status connect help daemon} \
                                            $::mpdng::command] == -1} {
    puts stderr "Failed to execute $argv"
    puts stderr $::mpdng::usage
    exit 1
}

###########################################################################
# Ok then, script variables for the default per user process. May be
# overwriten by the startup.config
# TODO ici lire le ficher startup, mais seulement ce qui est du contexte
# sysconfig, sinon les valeurs par defaut
set ::mpdng::home_dir    [file join $env(HOME) .mpd-ng]
set ::mpdng::startup_cfg [file join $::mpdng::home_dir startup.config]
set ::mpdng::pid_file    [file join $::mpdng::home_dir running.pid]
set ::mpdng::msg_log     [file join $::mpdng::home_dir messages.log]
set ::mpdng::err_log     [file join $::mpdng::home_dir errors.log]
set ::mpdng::socket_path [file join $::mpdng::home_dir mpd-ng.socket]

###########################################################################
# Create home directory if absent
if {! [file exist $::mpdng::home_dir]} {
    file mkdir $::mpdng::home_dir
    file attribute $::mpdng::home_dir -permissions 0700
}

###########################################################################
# Here define all commands functions but the stelth "daemon" one.
#
namespace eval ::mpdng {

    #######################################################################
    # mpd-ng start
    proc start {} {
        return 0
    }

    #######################################################################
    # mpd-ng status
    proc status {} {
        if [file exist $::mpdng::pid_file] {
            set f [open $::mpdng::pid_file "r"]
            set fpid [read $f]
            close $f
            puts "mpd-ng $fpid running"
        } else {
            puts "mpd-ng down"
        }
        return 0
    }

    ####################################################################
    ##
    # mpd-ng help
    proc help {ret} {
        if { $ret == 0 } {
            puts stdout $::mpdng::usage
        } else {
            puts stderr $::mpdng::usage
        }
        return $ret
    }

    #######################################################################
    # mpd-ng connect
    proc connect {} {
        if { ! [file exist $::mpdng::pid_file] } {
            set ret [exec [info script] start]
            if {$ret > 0} {
                puts "mpd-ng connect: error starting mpd-ng"
                return $ret
            }
        }

        if { ! [file exist $::mpdng::socket_path] } {
            puts "mpd-ng connect: $::mpdng::socket_path does not exists"
            return 1
        }

        return 0
    }

    #######################################################################
    # mpd-ng kill
    proc kill {} {
        if [file exist $::mpdng::pid_file] {
            set f [open $::mpdng::pid_file "r"]
            set fpid [read $f]
            close $f
            set ret [exec kill $fpid]
            if {$ret == 0} {
                puts "mpd-ng process $fpid killed"
            }
            file delete $::mpdng::pid_file
            return $ret
        } else {
            puts "No mpd-ng process running"
            return 0
        }
    }
}

###########################################################################
# Handle script command argument
switch [lindex $argv 0] {
    "daemon"  {}
    "start"   {exit [::mpdng::start]}
    "kill"    {exit [::mpdng::kill]}
    "status"  {exit [::mpdng::status]}
    "connect" {exit [::mpdng::connect]}
    "help"    {exit [::mpdng::help 0]}
    default   {exit [::mpdng::help 1]}
}

###########################################################################
# !!!         ONLY THE "mpd-ng daemon" COMMAND GOES OVER THERE         !!!!
###########################################################################

proc ::mpdng::main {} {

    if {[file exists $::mpdng::startup_config] != 1} {
        ::mpdng::command "switch-context system"
        ::mpdng::command "write running.config startup.config"
    }
    set fd [open "/home/seb/src/mpd-ng/startup.config" "r"]
    foreach line [split [read $fd] "\n"] {
        ::mpdng::command $line
    }
    close $fd


    #######################################################################
    # Load all possible plugins
    foreach plugdir $::mpdng::plugdirs {
        set pluglibs [glob -nocomplain -directory $plugdir "*.so"]
        foreach plugin $pluglibs {
            puts "will load $plugin"
            ::mpdng::c::plugins::load $plugin
        }
    }

    ::mpdng::c::outputs::open



    set test_set [glob -nocomplain -directory /home/seb/test/ "*.wav"]
    set ::mpdng::playlist::tracks [lsort -dictionary $test_set]
    puts stderr $test_set

    ::mpdng::playlist::play 0
    vwait _cataclysm_
}

namespace eval ::mpdng::contexts {
    variable root    {}
    variable current_context {}
    variable context_error 1

    proc unregister {name} {
        variable root
        dict remove root {*}$name
    }

    proc register {name fun} {
        variable root
        dict set root {*}$name handler $fun
    }

    proc evaluate {cmd} {
        variable current_context
        variable context_error
        variable root
        if {[lindex $cmd 0] == "switch-context"} {

            if {[llength $cmd] < 2} {
                return "/[string join $current_context "/"]"
            }

            set cname_orig [lindex $cmd 1]
            if {[string match "/*" $cname_orig]} {
                # absolute
                set cname [split $cname_orig "/"]

            } else {
                # relative
                set cname [concat $current_context [split $cname_orig "/"]]
            }

            puts "$root"
            puts "$current_context"
            if {[catch {dict get $root {*}$current_context handler} handler]} {
                set context_error 1
                return "wront context name /[join $current_context "/"]"
            }

            return $cname
        } else {
            set handler [dict get $root {*}$current_context handler]
            ${handler} $current_context $cmd
        }
    }
}

namespace eval ::mpdng::configure {

    proc eval {cmd} {
        puts "configure!!!! $cmd"
    }

    ::mpdng::contexts::register [list configure] ::mpdng::configure

}


proc ::mpdng::command {str} {
    set str [string tolower [string trim $str]]
    if {[string match "#*" $str] || [string length $str] == 0} {
        return
    }
    set cmd [split $str]
    ::mpdng::contexts::evaluate $cmd

}


namespace eval ::mpdng::usocket {
    variable connexions

    proc accept {con} {
        puts "hello $con"
    }

}

namespace eval ::mpdng::playlist {
    variable tracks [list]
    variable current_track -1
    variable next_track    -1

    proc play {index} {
        variable tracks
        variable current_track
        variable next_track

        set numTracks [llength $tracks]

        if {[llength $tracks] == 0} {
            puts stderr "no tracks to play"
            return
        }

        if {$index > $numTracks} {
            puts stderr "no tracks at index $index"
            return
        }

        if {$index < 0} {
            set index 0
        }

        if {[catch {::mpdng::c::player::play \
                            [lindex $tracks $index]} err] == 0 } {
            set current_track $index
            #::mpdng::playlist::setnext
        } else {
            puts stderr "Can not play [lindex $tracks $index]"
        }
    }

    proc setnext {} {
        variable tracks
        variable current_track
        variable next_track

        set maybe_next [expr $current_track + 1]
        if {$maybe_next > [llength $tracks]} {
            return
        }

        if {[catch {::mpdng::c::player::setnext \
                        [lindex $tracks $maybe_next]} err] == 0} {
            set next_track $maybe_next
        } else {
            puts stderr "Can not setnext [lindex $tracks $maybe_next]"
            set next_track -1
        }
    }
}

namespace eval ::mpdng::collection {
}

::mpdng::main
